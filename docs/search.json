[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evaluation d’impact de politiques et projets",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#démarche",
    "href": "index.html#démarche",
    "title": "Evaluation d’impact de politiques et projets",
    "section": "Démarche",
    "text": "Démarche\nCe contenu est un support de formation conçu pour initier à l’économétrie spatiale chercheurs, doctorants et étudiants s’orientant vers une thèse. Le cas d’étude choisi pour servir de fil rouge à ces travaux est l’impact des aires protégées sur la déforestation, mais les méthodes décrites sont appropriées pour évaluer de nombreux types d’intervention ayant une dimension spatiale, que ce soit en matière d’environnement, d’agriculture, de gestion des risques ou de développement urbain. Le document a été élaboré avec les priorités suivantes :\n\nCompréhension des enjeux théoriques et méthodologiques soulevés par les évaluations d’impact ;\nIdentification des spécificités et opportunités liées à l’évaluation d’interventions spatialisées ;\nObtention de données spatiale permettant de démontrer et de quantifier l’impact ;\nCompréhension des différentes approches pour constituer un contrefactuel : randomisation, appariement, comparaison avant-après, différence de différences ;\nFamiliarisation avec l’outil de traitement statistique R;\nDéveloppement d’un regard critique sur la pertinence et la fiabilité des données mobilisées.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#tany-vao-et-betsaka",
    "href": "index.html#tany-vao-et-betsaka",
    "title": "Evaluation d’impact de politiques et projets",
    "section": "Tany Vao et BETSAKA",
    "text": "Tany Vao et BETSAKA\nCe contenu a été initialement développé afin de servir de support pédagogique pour l’atelier “évaluation des politiques” de la session 2022 des Universités en sciences sociales Tany Vao. Les universités Tany Vao visent à dispenser une formation à la recherche de haut niveau à l’attention de doctorants et jeunes chercheurs de Madagascar et d’Afrique de l’Ouest. Cet atelier a été réitéré à l’Université d’Antananarivo en 2023 et 2024 dans le cadre du projet BETSAKA. Le projet BETSAKA vise à évaluer l’impact environnemental et socioéconomique des politiques de conservation à Madagascar, en priorisant le renforcement des capacités locales de rercherche et le dialogue chercheurs-décideurs-opérationnels.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#contributions",
    "href": "index.html#contributions",
    "title": "Evaluation d’impact de politiques et projets",
    "section": "Contributions",
    "text": "Contributions\nCet ouvrage a bénéficié de nombreuses contributions :\n\nPour la première édition : Marc Bouvier, Kenneth Houngbedji, Jeanne de Montalembert et Marin Ferry ;\nPour la seconde édition : Lenaïg Moign et Clément Sambandahy ;\nPour la troisième édition : Ingrid Dallmann et Melvin Wong.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01_programme.html",
    "href": "01_programme.html",
    "title": "1  Programme",
    "section": "",
    "text": "1.1 JOUR 1 : L’évaluation d’impact : Pourquoi ? Comment ?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-1-lévaluation-dimpact-pourquoi-comment",
    "href": "01_programme.html#jour-1-lévaluation-dimpact-pourquoi-comment",
    "title": "1  Programme",
    "section": "",
    "text": "8h - 9h30 : Présentation de l’atelier (60 minutes)\n\nObjectif, contenu, programme\nMéthode, exercices et constitution des groupes\nFormateurs et stagiaires (expérience R…)\n\nDiscussion/questions (30 minutes)\n\nLien entre la formation et les agendas des participants\nIntérêt de la dimension spatiale\nFil rouge pour expliquer les méthodes d’analyses : l’impact des aires protégées sur la déforestation\n\n\n9h30 - 10h : Pause\n10h - 12h : Définition des objectifs de l’évaluation (90 minutes)\n\nSuivi, évaluations classiques et d’impact : liens et différences\nCorrélation vs causalité : théorie des évaluations d’impact\n\nDiscussion/questions (30 minutes)\n\nIllustrations autour de cas concrets\n\n12h - 13h30 : Pause déjeuner\n13h30 - 14h45 : Tour d’horizon des méthodes d’évaluation (45 minutes)\n\nMéthodes par assignation aléatoire\nBACI (Before-after-control-impact)\nAppariement, double différence, contrôles synthétiques\nRégression sur discontinuité et variables instrumentales\nCas d’application et avantages-inconvénients de chacune\nDurée :\n\nDiscussion/questions (30 minutes)\n\nFocus sur les méthodes qui ne seront pas approfondies\nDurée :\n\n14h45 - 15h : Pause\n15h - 17h : Étude d’articles : cadrage (30 minutes)\nDiscussion/questions (90 minutes)\n\nFormation des groupes\nIdentification des articles\nDébut des travaux pratiques (pas finis en séance)\nDébrieffing pour s’assurer que la méthode est bien comprise",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-2-initiation-à-r",
    "href": "01_programme.html#jour-2-initiation-à-r",
    "title": "1  Programme",
    "section": "1.2 JOUR 2 : Initiation à R",
    "text": "1.2 JOUR 2 : Initiation à R\n\n8h - 8h30 : Environnement technique (30 minutes)\n8h30 - 9h : Interface et formats (60 minutes)\n9h30 - 10h : Pause\n10h - 12h : Règles de code, assignation, objets (120 minutes)\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Fonctions, librairies, aide (90 minutes)\n15h - 15h30 : Pause\n15h30 - 17h : Import de données, valeurs manquantes (90 minutes)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-3-initiation-à-r-et-restitution-des-lectures-darticles",
    "href": "01_programme.html#jour-3-initiation-à-r-et-restitution-des-lectures-darticles",
    "title": "1  Programme",
    "section": "1.3 JOUR 3 : Initiation à R et restitution des lectures d’articles",
    "text": "1.3 JOUR 3 : Initiation à R et restitution des lectures d’articles\n\n8h - 9h30 : Manipulations de données avec tidyverse (90 minutes)\n\nOpérateur “pipe” pour chaîner les opérations\nOpérations essentielles : sélectionner, filtrer…\n\n9h30 - 10h : Pause\n10h - 12h : Manipulations de données avec tidyverse (120 minutes)\n\nSuite des opérations essentielles\nJointures\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Tables (gt) et graphiques (ggplot2) (75 minutes)\n15h - 15h30 : Pause\n15h30 - 17h : Restitution des lectures d’articles (90 minutes)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-4-données-spatiales-et-mapme.biodiversity",
    "href": "01_programme.html#jour-4-données-spatiales-et-mapme.biodiversity",
    "title": "1  Programme",
    "section": "1.4 JOUR 4 : Données spatiales et mapme.biodiversity",
    "text": "1.4 JOUR 4 : Données spatiales et mapme.biodiversity\n\n8h - 8h30 : Présentation des données spatiales (30 minutes)\n\nTypologies, sources et principes techniques\n\nQuestions / discussion (15 minutes)\n\nAvantages et inconvénients de ces sources\nExpériences des participants dans leur utilisation\nOpportunités pour leurs sujets de recherche\n\n8h30 - 9h15 : Manipulation de données spatiales d’AP sur R (45 minutes)\n\nTypes : vecteur, raster\nAnalogie avec les données tabulaires\nOpérations spécifiquement spatiales\n\n9h15 - 9h30 : Pause\n9h30 - 10h15 : Visualisation et analyse des données spatiales (45 minutes)\n\nPoint avec tmap\nClarification sur les projections\nPoursuite des exercices pratiques sur les aires protégées : comparaison des sources, statistiques descriptives\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Présentation du package mapme.biodiversity, discussion/questions et manipulation (90 minutes)\n\nConsultation des ressources disponibles\nDécouverte des données\nPréparation des données pour les aires protégées\n\n15h - 15h30 : Pause\n15h30 - 17h : Poursuite des analyses (90 minutes)\n\nCréation d’une grille sur le territoire\nExemple bref d’acquisition des données et calcul sur la grille",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-5-méthodes-expérimentales-et-observationnelles-avantaprès",
    "href": "01_programme.html#jour-5-méthodes-expérimentales-et-observationnelles-avantaprès",
    "title": "1  Programme",
    "section": "1.5 JOUR 5 : Méthodes expérimentales et observationnelles avant/après",
    "text": "1.5 JOUR 5 : Méthodes expérimentales et observationnelles avant/après\n\n8h - 9h30 : Randomisation (45 minutes)\nQuestions / discussion (15 minutes)\n\nDébat autour de la pertinence des RCT\nDéfis méthodologiques et pratique de la faisabilité\nQuestions éthiques\n\n9h30 - 10h : Pause\n10h - 12h : Application pratique : faisons “comme si” les AP étaient créées aléatoirement (45 minutes)\n\nAnalyse de données\nInterprétations\nTests d’équilibre\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Avant/Après (90 minutes)\nDiscussion/questions et manipulation\n\nLimites de l’approche\nMoyens de vérification des tendances\n\n15h - 15h30 : Pause\n15h30 - 17h : Tests de comparaison et d’équilibre avant-après et avec-sans (90 minutes)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-6-méthodes-observationnelles-dappariement-matching",
    "href": "01_programme.html#jour-6-méthodes-observationnelles-dappariement-matching",
    "title": "1  Programme",
    "section": "1.6 JOUR 6 : Méthodes observationnelles d’appariement (matching)",
    "text": "1.6 JOUR 6 : Méthodes observationnelles d’appariement (matching)\n\n8h - 9h30 : Différentes unités/échelles d’analyse (AP, cellules, pixels…) (30 minutes)\nQuestions / discussion (15 minutes)\n\nDébat autour de la pertinence des RCT\nDéfis méthodologiques et pratique de la faisabilité\nQuestions éthiques\nReprise du maillage travaillé en fin de J4 (45 minutes)\n\n9h30 - 10h : Pause\n10h - 12h : Appariement (Matching) (90 minutes)\nQuestions / discussion (30 minutes)\n\nClarification du principe d’appariement\nVariables pertinentes pour les aires protégées\nQuestions sur les biais potentiels liés aux variables non observables\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Présentation du package MatchIt (30 minutes)\n\nExercices d’application aux aires protégées\nSpécification des variables\nAlgorithmes d’appariement\nParamètres associés (60 minutes)\n\n15h - 15h30 : Pause\n15h30 - 17h : Suite des exercices d’application aux aires protégées (90 minutes)\n\nTests d’équilibre",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "01_programme.html#jour-7-double-différence-et-conclusion",
    "href": "01_programme.html#jour-7-double-différence-et-conclusion",
    "title": "1  Programme",
    "section": "1.7 JOUR 7 : Double différence et conclusion",
    "text": "1.7 JOUR 7 : Double différence et conclusion\n\n8h - 9h30 : Double différence (DiD) (60 minutes)\nQuestions / discussion (30 minutes)\n\nIntérêt de l’approche DiD\nEnjeux de validité si plusieurs périodes de comparaison\nStratégies de simplification\n\n9h30 - 10h : Pause\n10h - 12h : Package did (30 minutes)\n\nMise en application\nUtilisation sur 2 périodes\nUtilisation sur N périodes\nVérification des tendances de prétraitement (30 minutes)\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Synthèse et outils pratiques (30 minutes)\n\nExercices d’application aux aires protégées\nSpécification des variables\nAlgorithmes d’appariement\nParamètres associés\nRetour sur les méthodes pas approfondies : discontinuité de la régression, synthetic matching… (60 minutes)\n\n15h - 15h30 : Pause\n15h30 - 17h : Évaluation de la formation et remise des certificats (90 minutes)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programme</span>"
    ]
  },
  {
    "objectID": "02_introduction.html",
    "href": "02_introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1 Cadrage général pour les méthodes d’évaluation\nCliquer ici pour télécharger la présentation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "02_introduction.html#revue-des-articles",
    "href": "02_introduction.html#revue-des-articles",
    "title": "2  Introduction",
    "section": "2.2 Revue des articles",
    "text": "2.2 Revue des articles",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "bases_R.html",
    "href": "bases_R.html",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "",
    "text": "3.1 L’environnement",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "bases_R.html#lenvironnement",
    "href": "bases_R.html#lenvironnement",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "",
    "text": "3.1.1 Différences R et Rstudio\nR est un langage de programmation open source spécialisé dans la statistique et l’analyse des données. Il a été créé pour fournir un environnement convivial pour la manipulation, l’analyse et la visualisation des données.Il existe d’autres langages de programmation comme Python, JavaScript, Java, C++, etc.\nR est utilisé pour effectuer des opérations statistiques, faire de la modélisation, créer des graphiques et effectuer des analyses de données complexes.\nR est extrêmement flexible et extensible grâce à des packages R, qui ajoutent des fonctionnalités supplémentaires.\nRStudio est un environnement de développement intégré (IDE) conçu spécifiquement pour travailler avec le langage R. C’est un logiciel qui fournit une interface utilisateur plus conviviale pour écrire, exécuter et gérer des scripts R. Il existe d’autres IDE, comme Visual Studio Code ou Jupyter Notebook.\nRStudio inclut un éditeur de texte avec coloration syntaxique, un gestionnaire de packages, des fenêtres pour l’affichage des graphiques et des données, et bien d’autres fonctionnalités pour améliorer la productivité des utilisateurs R.\nEn somme, R est le langage de programmation sous-jacent pour l’analyse des données, tandis que RStudio est un environnement de développement qui facilite l’utilisation de R.\n\n\n3.1.2 Sources d’apprentissage\nIl existe de plusieurs ressources en français pour apprendre à coder sur R. Nous vous recommandons en particulier :\n\nIntroduction à R et au Tidyverse (Barnier 2022)\nutilitR: documentation collaborative sur R de l’INSEE (Galiana and Meslin 2022)\n\nLes bonnes ressources anglophones gratuites sont très nombreuses et faciles à trouver sur Internet. Le grand classique est R for data science, de Grolemund et Wickham (2022). On se focalise ici avec deux autres qui sont le plus en lien avec nos sujets :\n\nGeocomputation with R, a book on geographic data analysis,visualization and modeling (Lovelace, Nowosad, and Muenchow 2022).\nMapme.biodiversity: Efficient Monitoring of Global Biodiversity Portfolios (Görgen and Bhandari 2022)\n\nN’hésitez pas à chercher directement sur le Web en cas de problème. Vous serez souvent conduits vers les forums stackoverflow ou RStudio, qui sont aussi des ressources très précieuses pour résoudre des problèmes très spécifiques.\nPour un apprentissage interactif, vous pouvez également utiliser ChatGPT. Cet outil basé sur l’intelligence artificielle s’avère particulièrement utile pour les débutants qui ont besoin de support personnalisé ou pour les utilisateurs avancés comme assistant de programmation pour structurer des chaînes de traitement ou aider avec les problèmes les plus courants. Attention toutefois car il arrive régulièrement à ChatGPT “d’halluciner” des réponses lorsqu’il s’agit de questions très spécifiques.\nPour vous retrouver parmi la multitude de packages existants, il existe une ressource précieuse en ligne : CRAN Task View (https://cran.r-project.org/web/views/). Ce registre fournit des recommandations sur les packages présents sur CRAN adaptés à un sujet spécifique.\nIl existe également de superbes cheat-sheet (“antisèches”) qui récapitulent les principales ressource :\n\nhttps://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf\nhttps://rstudio.github.io/cheatsheets/\n\n\n\n3.1.3 Interface Rstudio\n\nA : fenêtre script/source B : console C : environnement D : explorateur\nLa fenêtre de script permet d’éditer les fichiers scripts en vue d’éxécuter le code.\nLa console est la fênetre où s’éxécute le code et où on peut directement taper des commandes. Il n’est pas obligatoire de passer par la fenêtre de script.\nLe signe “&gt;” dans votre console est appelé “invite de commande” ou “prompt”. C’est le symbole que la console utilise pour indiquer qu’elle est prête à recevoir des commandes ou des instructions de l’utilisateur. Une fois que vous voyez cet invite, vous pouvez commencer à entrer des commandes en utilisant le langage R. Après avoir entré une commande, vous appuyez sur Entrée pour l’exécuter.\nL’environnement rassemble des fonctionnalités pour suivre le fonctionnement de R, en faisant notamment apparaître les différents objets générés par notre script.\nL’explorateur permet de connaître les fichiers de notre ordinateur, de visualiser les rendus graphiques et cartographiqus, les différentes librairies et l’aide pour l’utilisation de ces dernières.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "bases_R.html#les-règles-de-codage",
    "href": "bases_R.html#les-règles-de-codage",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "3.2 Les règles de codage",
    "text": "3.2 Les règles de codage\nOn se focalise ici sur quelques aspects qui peuvent être requis pour la manipulation du code et à la marge.\n\n3.2.1 La lisibilité du code\nLorsqu’on saisit une commande, que ce soit dans la console ou dans la fenêtre de script, les espaces autour des opérateurs n’ont pas d’importance.\nLes trois commandes suivantes sont donc équivalentes, mais on privilégie en général la deuxième pour des raisons de lisibilité du code.\n\n# Ce qui suit un dièze n'est pas exécuté. On appelle ça un commentaire.\n\n# Les trois commandes seront comprises par le code\n10+2 \n\n[1] 12\n\n10 + 2 \n\n[1] 12\n\n10       +       2\n\n[1] 12\n\n\nPour les opérations plus complexes, il faut veiller à utiliser les parenthèses, sinon les résultats ne seront pas corrects :\n\n10 + 2 * 5 / 14 - 2 * 2 \n\n[1] 6.714286\n\n#&gt;[1] 6.714286\n\n(10 + (2*5)) / (14 - (2 * 2))  \n\n[1] 2\n\n\n\n\n3.2.2 L’assignation (création d’objets)\nLe signe &lt;- correspond à l’assignation d’une valeur à une variable dont on choisit le nom.\n\n# On commence par faire une opération simple\n3 + 4\n\n[1] 7\n\n# Ce qui équivaut à :\na &lt;- 3\nb &lt;- 4\na + b\n\n[1] 7\n\n# Et on peut également stocker le résultat dans une nouvelle variable\nc &lt;- a + b\nc\n\n[1] 7\n\n\nDu fait de l’assignation “&lt;-”, les valeurs sont automatiquement associées à l’objet et ce dernier apparaît dans la fenêtre environnement.\nDe manière générale, vous allez retrouver dans cette fenêtre tous les objets que vous avez créés après éxécution du code : que ce soit de simples variables, des tableaux, des fonctions, des objets graphiques, etc.\nQuand on assigne une nouvelle valeur à un objet déjà existant, la valeur précédente est perdue.\n\nx &lt;- 2\nx &lt;- 5\nx\n\n[1] 5\n\n#&gt; [1] 5\n\n\n\n3.2.3 Les différents types d’objets\nLes objets peuvent contenir tout un tas de données. Jusqu’ici on n’a stocké que des nombres, mais ils peuvent aussi contenir des chaînes de caractères (du texte), qu’on délimite avec des guillemets simples ou doubles (’ ou “) :\n\nLa chaîne de caractères\n\n\nchien &lt;- \"Chihuahua\"\nchien\n\n[1] \"Chihuahua\"\n\n#&gt; [1] \"Chihuahua\"\n\nIci la variable “chien” est un objet contenant une chaîne de caractères.\nUn point important est relatif aux types des variables : numérique, catégorielles, textes, dates, spatiales… En général, les opérations ne peuvent concerner que des variables du même type. Les fonctions sont souvent contraignantes quant aux types des variables qu’elles prennent comme arguments.\n\n# Exemple avec une variable numérique et une variable caractère\nx &lt;- 5\ny &lt;- \"hello\"\n\n# Tentative d'addition de deux variables de types différents\n#resultat &lt;- x + y\n\n\nLes vecteurs\n\nLes vecteurs permettent de stocker des informations de même nature dans un unique objet. Exemple :\n\n# Si on continuait à créer des objets ponctuels :\ntaille1 &lt;- 156\ntaille2 &lt;- 164\ntaille3 &lt;- 197\ntaille4 &lt;- 147\ntaille5 &lt;- 173\n(taille1 + taille2 + taille3 + taille4 + taille5) / 5\n\n[1] 167.4\n\n#&gt; [1] 167.4\n\nPrécédemment, nous avons stockés différentes valeurs chiffrées sous plusieurs objets qui apparaissent dans notre fenêtre d’environnement.\n\ntailles &lt;- c(156, 164, 197, 147, 173)\n#&gt; [1] 156 164 197 147 173\n\nUn vecteur dans R est un objet qui peut contenir plusieurs informations du même type, potentiellement en très grand nombre.\nIci la variable “tailles”est un vecteur contenant des valeurs chiffrées.\nCe qui est pratique avec les vecteurs, c’est qu’on peut alors leur appliquer des opérations qui s’appliqueront à l’ensemble des valeurs du vecteur.\n\n# Si l'on souhaite mettre la taille en mètres : \n\ntailles / 100 \n\n[1] 1.56 1.64 1.97 1.47 1.73\n\n#&gt; [1] 1.56 1.64 1.97 1.47 1.73\n\ntailles_m &lt;- tailles / 100\ntailles_m\n\n[1] 1.56 1.64 1.97 1.47 1.73\n\n#&gt; [1] 1.56 1.64 1.97 1.47 1.73\n\nCela s’applique à tous les tyoes d’opérations.\n\nSans créer de nouvel objet, ajouter 10 cm aux tailles en centimètres et multiplier au carré les tailles en mètres\n\n\ntailles + 10\n\n[1] 166 174 207 157 183\n\n#&gt; [1] 166 174 207 157 183\ntailles_m^2\n\n[1] 2.4336 2.6896 3.8809 2.1609 2.9929\n\n#&gt; [1] 2.4336 2.6896 3.8809 2.1609 2.9929\n\nOn peut également appliquer des opérations spécifiques à chaque valeur à l’aide d’un autre vecteur :\n\n# Création d'un nouveau vecteur avec l'âge\nage &lt;- c(52, 82, 19, 49, 29)\n\n\nEn créant une nouvelle variable “age_tailles_m”, calculer le ratio de l’age par rapport à la taille en mètres\n\nL’Indice de Masse Corporelle se calcule de la manière suivante:\n\\[ IMC = poids (kg) / (taille (m))²\\]\n\nEn créant une nouvelle variable “imc”, calculez le ratio pour les 5 valeurs\n\n\ntailles &lt;- c(156, 164, 197, 147, 173)\npoids &lt;- c(45, 59, 110, 44, 88)\n\n\nLes data.frame\n\nUn data.frame est un tableau qui peut contenir différents types de données (nombres, chaînes de caractères, etc.) organisées en colonnes.\n\n# On commence par créer les variables (les colonnes du tableau)\nnoms &lt;- c(\"John\", \"Jack\", \"Cindy\", \"Samantha\")\nsexe &lt;- c(\"homme\", \"homme\", \"femme\", \"femme\")\nages &lt;- c(42, 57, 24, NA)\npoids &lt;- c(87, 73, NA, NA)\ntailles &lt;- c(174, 198, 192, 164)\n\n# On les rassemble dans un tableau \nma_table &lt;- data.frame(noms, sexe, ages, poids, tailles)\n\nma_table\n\n      noms  sexe ages poids tailles\n1     John homme   42    87     174\n2     Jack homme   57    73     198\n3    Cindy femme   24    NA     192\n4 Samantha femme   NA    NA     164\n\n\n\n\n3.2.4 Les noms d’objets\nLes noms d’objets peuvent contenir des lettres, des chiffres, les symboles . et _. Ils ne peuvent pas commencer par un chiffre. Attention, R fait la différence entre minuscules et majuscules dans les noms d’objets, ce qui signifie que x et X seront deux objets différents, tout comme resultat et Resultat.\nDe manière générale, il est préférable d’éviter les majuscules (pour les risques d’erreur) et les caractères accentués (pour des questions d’encodage) dans les noms d’objets.\nDe même, il faut essayer de trouver un équilibre entre clarté du nom (comprendre à quoi sert l’objet, ce qu’il contient) et sa longueur. Par exemple, on préfèrera comme nom d’objet taille_conj1 à taille_du_conjoint_numero_1 (trop long) ou à t1 (pas assez)\n\n\n3.2.5 Les fonctions\nR est constitué de fonctions. De nombreuses fonctions prédéfinies sont contenues dans la base de R ou dans des packages qu’on ajoute (que l’on verra plus tard). La meilleure manière de comprendre ce qu’est une fonction est d’en créer une soi même.\n\n# On crée une fonction \"ajoute\" qui prend deux paramètres. \n# x est un premier et y est celui qu'on ajoute\najoute &lt;- function(x, y) {\n  x + y\n}\n\n# On peut maintenant utiliser cette fonction\najoute(3, 4)\n\n[1] 7\n\n# On peut effectuer les mêmes opérations. Les valeurs a et b sont encore \n# en mémoire, donc on peut faire :\najoute(a, b)\n\n[1] 7\n\nc &lt;- ajoute(a, b)\nc\n\n[1] 7\n\najoute(c, a)\n\n[1] 10\n\n\nLorsque vous téléchargez un package (ou librairie), ce dernier charge en réalité un éventail de fonctions que vous pouvez explorer via l’aide.\n\n# la fonction sum() est une fonction de base de R, mais d'autres opérations plus complexes sous enregistrées dans des packages spécifiques\nsum(a,b)\n\n[1] 7\n\n\n\nExercice : rendre lisible le code ci-dessous\n\n\nx &lt;- 5*(3+2)-1\nif(x%%2==0) {print('Pair')} else{print('Impair')}\n\n[1] \"Pair\"\n\nfor(i in 1:10) {if(i%%2 == 0) {print(paste('Nombre pair :', i))} else{print(paste('Nombre impair :', i))}}\n\n[1] \"Nombre impair : 1\"\n[1] \"Nombre pair : 2\"\n[1] \"Nombre impair : 3\"\n[1] \"Nombre pair : 4\"\n[1] \"Nombre impair : 5\"\n[1] \"Nombre pair : 6\"\n[1] \"Nombre impair : 7\"\n[1] \"Nombre pair : 8\"\n[1] \"Nombre impair : 9\"\n[1] \"Nombre pair : 10\"\n\n\n\n\n3.2.6 Les valeurs manquantes\nLes valeurs manquantes sont fréquentes dans les jeux de données. Elles notées NA dans R (certaines peuvent avoir pour valeur NaN). On utilise la fonction na.rm= TRUE pour les éluder dans les opérations simples.\n\n# On peut reprendre le jeu de données ma_table \n# On peut faire une moyenne sur les tailles car on a toutes les variables\nmean(ma_table$tailles)\n\n[1] 182\n\nsum(ma_table$tailles)\n\n[1] 728\n\n# Mais la moyenne ne fonctionne pas immédiatement sur les poids ou les âges\n# car il manque des variables\nmean(ma_table$ages)\n\n[1] NA\n\nsum(ma_table$poids)\n\n[1] NA\n\n# Pour que cela fonctionne, il faut spécifier quoi faire des valeurs manquantes\n# en indiquant na.rm = TRUE (NA pour \"non-available\" et RM pour \"remove\")\nmean(ma_table$ages, na.rm = TRUE)\n\n[1] 41\n\nsum(ma_table$poids, na.rm = TRUE)\n\n[1] 160",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "bases_R.html#librairies-r",
    "href": "bases_R.html#librairies-r",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "3.3 Librairies R",
    "text": "3.3 Librairies R\nLes librairies R sont communément appelées “packages”. Plusieurs packages R sont utilisées pour ce projet. Les packages dans R sont des extensions de logiciels qui ajoutent des fonctionnalités spécifiques au langage R de base.\nIls sont conçus pour faciliter l’analyse de données, la visualisation, la modélisation statistique, et bien plus encore. Les packages sont comme des boîtes à outils virtuelles qui permettent aux utilisateurs d’effectuer des tâches analytiques avancées sans avoir à réinventer la roue à chaque fois. Ils permettent de gagner du temps et de se concentrer sur la résolution de problèmes spécifiques à son domaine d’étude, au lieu de vous soucier de la programmation de fonctions de base.\nLors de la rédaction de publications scientifiques, il est important de citer correctement les packages R utilisés dans votre analyse. Assurez-vous d’inclure le nom complet du package ainsi que le nom de son auteur ou des auteurs. Zotero et RStudio permettent aisément d’inclure ces citations dans votre analyse.\nLes autres packages mobilisés dans pour ce cours sont listés dans le bloc de code ci-dessous :\n\nlibrary(\"tidyverse\") # Une série de packages pour faciliter la manipulation de données\nlibrary(\"readxl\") # Pour lire les fichiers excel (Carvalho et al. 2018)\nlibrary(\"gt\") # Pour des rendus graphiques harmonisés html et pdf/LaTeX\nlibrary(\"wdpar\") # Pour télécharger simplement la base d'aires protégées WDPA\n\n\n3.3.1 Le tidyverse\nLe “tidyverse” st un ensemble cohérent de packages R conçus pour la manipulation, la visualisation et l’analyse de données de manière cohérente et efficace. Il a été développé pour simplifier le flux de travail de l’analyse de données et pour rendre le code plus lisible et plus facile à comprendre.\n\n\n3.3.2 L’opérateur pipeline\nLe signe %&gt;% est un “tuyau”. On peut le lire à haute voix comme “ensuite”. Par exemple :\n\nlibrary(tidyverse)\n\nd &lt;- a %&gt;%\n  ajoute(b) %&gt;%\n  ajoute(c)\n\n\n\n3.3.3 La préparation des données avec dplyr\nLe “tidyverse” comprend plusieurs packages populaires, et notamment,dplyr. Ce dernier est très utile pour épurer les données lorsque vous travaillez sur des tableaux (et donc sur des tables attributaires).\nIl est utilisé pour la manipulation de données, notamment le filtrage, la sélection, le regroupement et la création de nouvelles variables.\n\n# Un exemple qui combine ces opérations\nma_table %&gt;%\n  filter(!is.na(ages)) \n\n   noms  sexe ages poids tailles\n1  John homme   42    87     174\n2  Jack homme   57    73     198\n3 Cindy femme   24    NA     192\n\n#consulter la sortie de l'objet\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids) \n\n   sexe ages tailles poids\n1 homme   42     174    87\n2 homme   57     198    73\n3 femme   24     192    NA\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids) %&gt;%\n  group_by(sexe) %&gt;%\n  summarise(nb_pers = n())\n\n# A tibble: 2 × 2\n  sexe  nb_pers\n  &lt;chr&gt;   &lt;int&gt;\n1 femme       1\n2 homme       2\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids) %&gt;%\n  group_by(sexe) %&gt;%\n  summarise(nb_pers = n(),\n            somme_poids = sum(poids, na.rm = TRUE),\n            taille_max = max(tailles, na.rm = TRUE),\n            age_moy = mean(ages, na.rm = TRUE))\n\n# A tibble: 2 × 5\n  sexe  nb_pers somme_poids taille_max age_moy\n  &lt;chr&gt;   &lt;int&gt;       &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n1 femme       1           0        192    24  \n2 homme       2         160        198    49.5\n\n# &gt; A tibble : 2 x 5 \n#   sexe  nb_pers somme_poids taille_max age_moy\n#   &lt;chr&gt;   &lt;int&gt;       &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n# 1 femme       1           0        192    24  \n# 2 homme       2         160        198    49.5\n\nVoici certaines de fonctions fondamentales du dplyr : - select : choisir des colonnes - filter : choisir des lignes - mutate : modifier des valeurs - group_by : variables pour des tris - summarise : créer des filtres\n\nExercice en groupe : à partir du tableau ventes_magasin, utiliser les fonctions précédentes et le pipe operator pour réaliser les opérations suivantes :\n\n\nSélectionnez uniquement les colonnes produit, quantite, et prix_unitaire du data frame ventes_magasin.\nNe conservez que les ventes où la quantité vendue est supérieure à 5 unités.\nAjoutez une nouvelle colonne nommée montant qui représente le montant total de chaque vente (quantité multipliée par le prix unitaire) et ajoutez-la au data frame.\nCréez un nouveau tableau ventes_par_produit, regroupez les données par produit pour calculer la quantité totale vendue de chaque produit.\nComplétez ce tableau avec le montant total et le nombre de ventes.\n\n\n# Création du data frame ventes_magasin\n\nventes_magasin &lt;- data.frame(\n  produit = c(\"Produit A\", \"Produit B\", \"Produit A\", \"Produit C\", \"Produit B\", \n              \"Produit A\", \"Produit C\", \"Produit B\", \"Produit A\"),\n  quantite = c(8, 4, 12, 6, 7, 9, 3, 11, 5),\n  prix_unitaire = c(10, 15, 8, 12, 20, 10, 18, 14, 9),\n  date_vente = ymd( # Cette fonction interprète des dates year-month-day\n    c(\"2023-01-05\", \"2023-01-08\", \"2023-01-09\", \"2023-01-10\", \"2023-01-15\", \n      \"2023-01-20\", \"2023-01-25\", \"2023-01-30\", \"2023-02-02\"))\n  )\n\n\n\n3.3.4 Les jointures\nJointures : fusionner deux tableaux par une variable d’identification (“clé”)\n\n# Tableau clients\nclients &lt;- data.frame(ID = c(1, 2, 3, 4),\n                      nom_client = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"))\n\n# Tableau commandes\ncommandes &lt;- data.frame(ID = c(2, 3, 1, 4),\n                        montant = c(100, 150, 50, 200))\n\n# Jointure par ID\nresultat &lt;- inner_join(clients, commandes, by = \"ID\")\n\nCette opération exige toutefois que la variable d’identification soit écrite de manière identique dans les deux jeux de données.\nSupposons que l’on travaille sur les aires protégées à Madagascar et que l’on dispose de deux jeux de données provenant de sources différentes. On a alors des informations complémentaires que l’on souhaite fusionner en un seul tableau via le nom de l’aire protégée.\nIl faudra veiller à ce que les noms aient la même écriture (pas de différences avec des majuscules, des abréviations ou des noms raccourcis)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "bases_R.html#import-de-données",
    "href": "bases_R.html#import-de-données",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "3.4 Import de données",
    "text": "3.4 Import de données\nEn très bref :\n\nPour les fichiers excel ou csv, dans le volet “files” du panneau en bas à droite de l’interface Rstudio, cliquer sur le fichier en question et utiliser l’assistant d’import.\nPour les autres fichiers, se référer à l’aide ou chercher sur internet. Le cheat sheet”base R” présente les principales importations.\n\nConcernant les données d’aires protégées importées :\n\nLes études sur les aires protégées s’appuient fréquemment sur la base WDPA (World Database on Protected Area), consultable en ligne sur https://protectedplanet.net.\nLa base rassemblée par l’association Vahatra dans le cadre de la monographie qu’elle a coordonnée sur l’ensemble des aires protégées terrestres malgaches semble beaucoup plus fiable (Goodman et al. 2018). Les données en question sont disponibles sur le portail https://protectedareas.mg avec une licence creative commons (CC-BY).\n\nOn va désormais importer les données avec l’information géographique :\n\n3.4.1 Import et exploration des données Vahatra\n\n# On travaille maintenant le fichier excel\nAP_Vahatra &lt;- read_xlsx(\"data/AP_Vahatra.xlsx\")\n\n# On fait apparaître le nom des colonnes \ncolnames(AP_Vahatra)\n\n [1] \"nom\"                \"cat_iucn\"           \"creation\"          \n [4] \"date_creation\"      \"date_modification\"  \"mention_changement\"\n [7] \"hectares\"           \"num_atlas_\"         \"full_name\"         \n[10] \"province\"           \"region\"             \"district\"          \n[13] \"gest_1\"             \"gest_2\"             \"type_ap\"           \n[16] \"an_creation\"        \"nom_wdpa\"           \"geometry\"          \n[19] \"rownum\"            \n\n# On fait apparaître le nom des différentes aires protégées et leur catégorie IUCN \nAP_Vahatra %&gt;%\n  select(nom, cat_iucn) %&gt;%\n  filter(row_number() &lt;= 10)\n\n# A tibble: 10 × 2\n   nom                                     cat_iucn\n   &lt;chr&gt;                                   &lt;chr&gt;   \n 1 Agnakatrika                             VI      \n 2 Agnalazaha                              VI      \n 3 Ambatofotsy                             V       \n 4 Ambatotsirongorongo                     V       \n 5 Ambatovaky                              IV      \n 6 Ambohidray                              &lt;NA&gt;    \n 7 Ambohijanahary                          IV      \n 8 Ambohitantely                           IV      \n 9 Ambohitr'Antsingy Montagne des Français V       \n10 Amoron'i Onilahy                        V       \n\n# On fait apparaître le nom des parcs nationaux \nliste_PN &lt;- AP_Vahatra %&gt;%\n  filter(cat_iucn == \"II\") %&gt;%\n  select(nom) \n\n# Création d'une colonne pour la superficie en km² \nAP_Vahatra &lt;- AP_Vahatra %&gt;%\n  mutate(superficie_km2 = hectares * 0.01)\n\n# Tri des données de manière décroissante en fonction de la superficie en km²\nAP_Vahatra &lt;- AP_Vahatra %&gt;%\n  arrange(desc(superficie_km2))\n\n# Obtenir les 3 plus grandes aires protégées \nAP_Vahatra %&gt;% \n  slice_head(n = 3) %&gt;%\n  select(nom)\n\n# A tibble: 3 × 1\n  nom                                  \n  &lt;chr&gt;                                \n1 Complexe Zones Humides Mangoky Ihotry\n2 Makira                               \n3 Corridor Ankeniheny Zahamena         \n\n# Obtenir la superficie totale de toutes les aires protégées \nAP_Vahatra %&gt;%\n  summarise(sum(AP_Vahatra$superficie_km2))\n\n# A tibble: 1 × 1\n  `sum(AP_Vahatra$superficie_km2)`\n                             &lt;dbl&gt;\n1                           63725.\n\n# Résumé statistique des superficies en km² \nsummary(AP_Vahatra$superficie_km2)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   2.249   46.061  249.625  650.253  758.975 4265.942 \n\n# Aires protégées de superficie supérieure ou égale au 3ème quartile\nAP_Vahatra %&gt;%\n  filter(superficie_km2 &gt;= 758.975) %&gt;%\n  nrow()\n\n[1] 25\n\n\n\nExercice : quelles aires protégées ont été créées après 2000 et dont la gestion est assurée par l’Etat ? # Production d’un joli tableau synthétique\n\nLa fonction gt() permet d’obtenir des tableaux bien formatés. Si vous vous intéressez aux catégories IUCN et à leur superficie totale sur l’ensemble des aires protégées :\n\n# Calcul des superficies totales pour chaque catégorie IUCN \nAP_Vahatra_iucn &lt;- AP_Vahatra %&gt;%\n  filter(!is.na(cat_iucn)) %&gt;%\n  group_by(cat_iucn) %&gt;%\n  summarise(superficie_totale = sum(superficie_km2))\n\n# Production du tableau\nAP_Vahatra_iucn %&gt;%\n  gt() %&gt;%\n  cols_label(cat_iucn = \"Catégorie IUCN\",\n             superficie_totale = \"Superficie totale (km²)\") %&gt;%\n  tab_header(\n    title = \"Aires protégées de Madagascar : superficies par catégorie IUCN\") %&gt;%\n  tab_source_note(\"Source : données de l'association Vahatra\") %&gt;%\n  fmt_number(decimals = 2)\n\n\n\n\n\n\n\nAires protégées de Madagascar : superficies par catégorie IUCN\n\n\nCatégorie IUCN\nSuperficie totale (km²)\n\n\n\n\nI\n22.40\n\n\nII\n25,380.56\n\n\nIII\n44.17\n\n\nIV\n4,138.88\n\n\nV\n22,752.70\n\n\nVI\n8,265.72\n\n\n\nSource : données de l'association Vahatra\n\n\n\n\n\n\n\n\nAvant de créer le graphique en nuages de points, nous devons préparer un tableau qui résume la superficie cumulée des aires protégées en fonction de leur année de création.\n\nAP_superficie_annees &lt;- AP_Vahatra %&gt;%\n  group_by(an_creation) %&gt;%\n  summarise(superficie_annuelle = sum(superficie_km2, na.rm = TRUE)) %&gt;%\n  arrange(an_creation) %&gt;%\n  mutate(superficie_cumulée = cumsum(superficie_annuelle))\n\n\nCréer un tableau pour représenter cette donnée de manière élégante\n\n\n\n3.4.2 Production d’un joli graphique\nOn cherche à décrire la dynamique de création d’aires protégées en termes de superficie. L’objectif est d’obtenir un graphique en nuages de points avec, pour chaque année de création, la superficie totale d’aires protégées.\n\nExercice de groupe : réfléchir à un tableau nommé “AP_superficie_annees” qui se base sur le jeu de données AP_Vahatra et qui pourrait alimenter le graphique en nuages de points. Utiliser la fonction cumsum()\n\nUne fois le tableau AP_superficie_annees créé, vous pouvez éxecuter le code suivant :\n\n# Graphique en nuages de points \nggplot(data = AP_superficie_annees, aes(x = an_creation, y = superficie_cumulée)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Année\", y = \"Superficie cumulée (km²)\") +\n  ggtitle(\"Superficie cumulée en fonction de l'année de création\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n3.4.3 Import et exploration des données World Database on Protected Areas\nAvant de télécharger depuis le web les données du WDPA, nous pouvons directement travailler sur la table attributaire (fichier Excel)\n\nlibrary(wdpar)\n# On regarde si les données WDPA sont disponibles sur l'ordinateur qui exécute\nif (file.exists(\"data/WDPA_Oct2024_MDG-shapefile.zip\")) {\n  # Si oui, on charge\n  WDPA_Mada &lt;- wdpa_read(\"data/WDPA_Oct2024_MDG-shapefile.zip\")\n} else {\n  # Si non, on télécharge depuis protectedplanet\n  WDPA_Mada &lt;- wdpa_fetch(\"Madagascar\",\n                      download_dir = \"data\")\n}\n\n\nExercice : comment auriez-vous comparer vos jeux de données Vahatra et WDPA_Mada ?\n\n\n\n3.4.4 Comparaison des données attributaires Vahatra et WDPA Madagascar\nOn peut déjà comparer le nombre d’aires protégées.\n\n# Comparaison nombres d'aires protégées Vahatra et WDPA\nAP_Vahatra %&gt;%\n  distinct(nom) %&gt;%\n  nrow()\n\n[1] 98\n\nWDPA_Mada %&gt;%\n  distinct(NAME) %&gt;%\n  nrow()\n\n[1] 167\n\n\nOn peut comparer les différences de dates et de statut.\n\n# Tout d'abord, on ne garde que les aires de WDPA qui apparaissent dans Vahatra\nWDPA_commun &lt;- WDPA_Mada %&gt;%\n  filter(NAME %in% AP_Vahatra$nom_wdpa) %&gt;%\n  filter(!(NAME == \"Analalava\" & IUCN_CAT == \"Not Reported\")) %&gt;%\n  filter(!(NAME == \"Site Bioculturel d'Antrema\" & IUCN_CAT == \"Not Reported\")) %&gt;%\n  filter(DESIG != \"UNESCO-MAB Biosphere Reserve\") %&gt;%\n  arrange(NAME)  %&gt;%\n  mutate(rownum = row_number())\n\n# On garde seulement les métadonnées que l'on veut comparer\nWDPA_a_comparer &lt;- WDPA_commun %&gt;% # On repart des AP communes\n  select(nom_wdpa = NAME, type_wdpa = INT_CRIT, cat_iucn_wdpa = IUCN_CAT,\n         year_wdpa = STATUS_YR) # On ne garde que les colonnes à comparer\n\nverif_meta_wdpa &lt;-AP_Vahatra %&gt;%\n  st_drop_geometry() %&gt;% # Pas besoin d'un jeu spatial\n  select(nom:date_modification, nom_wdpa) %&gt;% # colonnes à garder dans Vahatra\n  # On renomme la catégorie IUCN de Vahatra et on code les NA comme dans WDPA\n  mutate(cat_iucn = ifelse(is.na(cat_iucn), \"Not Reported\", cat_iucn)) %&gt;%\n  left_join(WDPA_a_comparer, by = \"nom_wdpa\") %&gt;% # On rassemble Vahatra et WDPA\n  # On compare les dates et statuts\n  mutate(`Différence de date` = year(date_creation) != year_wdpa,\n         `Différence de statut` = cat_iucn != cat_iucn_wdpa)\n\nverif_meta_wdpa %&gt;%\n  summarise(`Nombre d'aires protégées comparées` = n(),\n            `Différence de date` = sum(`Différence de date`),\n            `Différence de statut` = sum(`Différence de statut`)) %&gt;%\n  gt() %&gt;%\n  tab_header(title = paste(\"Différences entre les données de WDPA et celles de\",\n                     \"l'assciation Vahatra sur les aires protégées terrestres\",\n                     \"à Madagascar\"))\n\n\n\n\n\n\n\nDifférences entre les données de WDPA et celles de l'assciation Vahatra sur les aires protégées terrestres à Madagascar\n\n\nNombre d'aires protégées comparées\nDifférence de date\nDifférence de statut\n\n\n\n\n98\n68\n40",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "bases_R.html#import-des-données-géospatiales",
    "href": "bases_R.html#import-des-données-géospatiales",
    "title": "3  Fondamentaux pour l’utilisation de R",
    "section": "3.5 Import des données géospatiales",
    "text": "3.5 Import des données géospatiales\nOn va cette fois-ci importer les données avec l’information géographique :\n\nDonnées Vahatra\n\n\n# On importe dans R en pointant vers le fichier .geojson\nAP_Vahatra &lt;- st_read(\"data/AP_Vahatra.geojson\") \n\nReading layer `AP_Vahatra' from data source \n  `/home/onyxia/work/mapme_impact_training/data/AP_Vahatra.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 98 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 43.25742 ymin: -25.60502 xmax: 50.47724 ymax: -11.98301\nGeodetic CRS:  WGS 84\n\n\n\nLes limites communales :\n\n\nlibrary(geodata)\n\n# On enregistre les limites communales \ncontour_mada &lt;- gadm(country = \"Madagascar\", resolution = 1, level = 3,\n                     path = \"data/GADM\") %&gt;%\n  st_as_sf()\n\n# On enregistre contour_mada pour s'en servir par la suite\nsave(contour_mada, file = \"data/contour_mada.rds\")\n\n\n3.5.1 Le système de coordonnées de référence (SCR)\nLe Système de Coordonnées de Référence (SCR) est un élément fondamental lors du travail avec des données géospatiales.\nC’est un ensemble de conventions qui spécifie comment les coordonnées géodésiques (latitude, longitude, altitude) sont représentées et mesurées sur un plan cartographique (une carte, un système de coordonnées projetées).\nLes SCR sont basés sur un système de référence géodésique, mais ils introduisent des transformations et des projections pour représenter les coordonnées de manière plus pratique sur une surface plane. Un SCR est défini par la forme de l’ellipsoïde, l’origine du système de coordonnées et l’orientation de ses axes par rapport à l’ellipsoïde.\nPar exemple, pour le système de référence WGS84, l’origine du WGS 84 (World Geodetic System 1984) est située à l’intersection de l’équateur (latitude 0 degrés) et du méridien de Greenwich (longitude 0 degrés)\n\nDe nombreux pays et organisations ont leurs propres systèmes de référence géodésique, (ci-dessous un exemple) mais il existe également des systèmes de référence géodésique mondiaux, tels que le WGS 84 (World Geodetic System 1984), qui servent de norme internationale pour la cartographie et la géolocalisation.\nIl faut veiller à ce que nos systèmes de coordonnées de références. La fonction st_crs() fait partie du package sf()et permet de vérifier ce dernier.\n\n# On fait un point sur nos trois jeux de données \nst_crs(contour_mada) # WGS 84, EPSG:4326\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(WDPA_Mada) # WGS 84, EPSG:4326 \n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(AP_Vahatra) # WGS 84, EPSG:4326 \n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\n\n3.5.2 Les différents types de géométries\n\n# | tbl-cap: \"Caractéristiques spatiales des données d'aires protégées WDPA du Sénégal\"\n\n# On crée une colonne pour connaître la géométrie de chaque observation (mutate) \n# On trie les données en fonction de leur géométrie (group_by) \n# On résume l'effectif total pour chaque catégorie de géométrie (summarise). \n\nWDPA_Mada %&gt;%\n  mutate(geom_type = st_geometry_type(.)) %&gt;%  \n  group_by(geom_type) %&gt;%  \n  summarise(n = n())  %&gt;%\n  st_drop_geometry() %&gt;%\n  gt() \n\n\n\n\n\n\n\ngeom_type\nn\n\n\n\n\nMULTIPOINT\n8\n\n\nMULTIPOLYGON\n163\n\n\n\n\n\n\n\n\n\n3.5.3 Production d’une carte interactive\n\nlibrary(tmap)\n# On fait une carte pour visualiser la donnée géographique\n\ntmap_mode(\"view\") # En mode interactif\ntm_shape(contour_mada) +\n  tm_borders() +\n  tm_shape(AP_Vahatra) + \n  tm_polygons(col = \"cat_iucn\", alpha = 0.6, title = \"Catégorie IUCN\",\n              id = \"nom\",\n              popup.vars = c(\"Acte de création\" = \"creation\",\n                             \"Année de création\" = \"an_creation\",\n                             \"Surface (ha)\" = \"hectares\",\n                             \"Nom\" = \"nom\",\n                             \"Gestionnaire\" = \"gest_1\")) +\n  tmap_options(check.and.fix = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Barnier, Julien. 2022. “Introduction à r Et Au Tidyverse.”\nhttps://juba.github.io/tidyverse/index.html.\n\n\nGaliana, Lino, and Olivier Meslin, eds. 2022. “utilitR:\nDocumentation Collaborative Sur r.” https://www.book.utilitr.org/.\n\n\nGörgen, Darius A., and Om Prakash Bhandari. 2022.\nMapme.biodiversity: Efficient Monitoring of Global Biodiversity\nPortfolios. https://CRAN.R-project.org/package=mapme.biodiversity.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2022. R for Data Science:\nImport, Tidy, Transform, Visualize, and Model Data. 1st edition.\nSebastopol, CA: O’Reilly Media. https://r4ds.had.co.nz/.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2022.\nGeocomputation with R. Boca Raton London New York: Routledge.\nhttps://geocompr.robinlovelace.net/.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "01_introduction.html",
    "href": "01_introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Cadrage général pour les méthodes d’évaluation\nCliquer ici pour télécharger la présentation\nMentionner également les enjeux de prise en compte du qualitatif.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "01_introduction.html#revue-des-articles",
    "href": "01_introduction.html#revue-des-articles",
    "title": "1  Introduction",
    "section": "1.2 Revue des articles",
    "text": "1.2 Revue des articles\nOn va revoir deux articles récents qui emploient des méthodes semblables à celles que nous allons étudier pendant le cours :\n\nL’article “On track to achieve no net loss of forest at Madagascar’s biggest mine” de Devenish et al. (2022) paru dans Nature Sustainability.\nL’article “Forest loss report card for the world’s protected areas”, de Wolf et al. (2021), paru dans Nature Ecology & Evolution.\n\n\n\n\n\nDevenish, Katie, Sébastien Desbureaux, Simon Willcock, and Julia P. G. Jones. 2022. “On Track to Achieve No Net Loss of Forest at Madagascar’s Biggest Mine.” Nature Sustainability 5 (6): 498–508. https://doi.org/10.1038/s41893-022-00850-7.\n\n\nWolf, Christopher, Taal Levi, William J. Ripple, Diego A. Zárrate-Charry, and Matthew G. Betts. 2021. “A Forest Loss Report Card for the World’s Protected Areas.” Nature Ecology & Evolution 5 (4): 520–29. https://doi.org/10.1038/s41559-021-01389-0.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "00_programme.html",
    "href": "00_programme.html",
    "title": "Programme",
    "section": "",
    "text": "JOUR 1 : L’évaluation d’impact : Pourquoi ? Comment ?",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-1-lévaluation-dimpact-pourquoi-comment",
    "href": "00_programme.html#jour-1-lévaluation-dimpact-pourquoi-comment",
    "title": "Programme",
    "section": "",
    "text": "8h - 9h30 : Présentation de l’atelier (60 minutes)\n\nObjectif, contenu, programme\nMéthode, exercices et constitution des groupes\nFormateurs et stagiaires (expérience R…)\n\nDiscussion/questions (30 minutes)\n\nLien entre la formation et les agendas des participants\nIntérêt de la dimension spatiale\nFil rouge pour expliquer les méthodes d’analyses : l’impact des aires protégées sur la déforestation\n\n\n9h30 - 10h : Pause\n10h - 12h : Définition des objectifs de l’évaluation (90 minutes)\n\nSuivi, évaluations classiques et d’impact : liens et différences\nCorrélation vs causalité : théorie des évaluations d’impact\n\nDiscussion/questions (30 minutes)\n\nIllustrations autour de cas concrets\n\n12h - 13h30 : Pause déjeuner\n13h30 - 14h45 : Tour d’horizon des méthodes d’évaluation (45 minutes)\n\nMéthodes par assignation aléatoire\nBACI (Before-after-control-impact)\nAppariement, double différence, contrôles synthétiques\nRégression sur discontinuité et variables instrumentales\nCas d’application et avantages-inconvénients de chacune\nDurée :\n\nDiscussion/questions (30 minutes)\n\nFocus sur les méthodes qui ne seront pas approfondies\nDurée :\n\n14h45 - 15h : Pause\n15h - 17h : Étude d’articles : cadrage (30 minutes)\nDiscussion/questions (90 minutes)\n\nFormation des groupes\nIdentification des articles\nDébut des travaux pratiques (pas finis en séance)\nDébrieffing pour s’assurer que la méthode est bien comprise",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-2-initiation-à-r",
    "href": "00_programme.html#jour-2-initiation-à-r",
    "title": "Programme",
    "section": "JOUR 2 : Initiation à R",
    "text": "JOUR 2 : Initiation à R\n\n8h - 8h30 : Environnement technique (30 minutes)\n8h30 - 9h : Interface et formats (60 minutes)\n9h30 - 10h : Pause\n10h - 12h : Règles de code, assignation, objets (120 minutes)\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Fonctions, librairies, aide (90 minutes)\n15h - 15h30 : Pause\n15h30 - 17h : Import de données, valeurs manquantes (90 minutes)",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-3-initiation-à-r-et-restitution-des-lectures-darticles",
    "href": "00_programme.html#jour-3-initiation-à-r-et-restitution-des-lectures-darticles",
    "title": "Programme",
    "section": "JOUR 3 : Initiation à R et restitution des lectures d’articles",
    "text": "JOUR 3 : Initiation à R et restitution des lectures d’articles\n\n8h - 9h30 : Manipulations de données avec tidyverse (90 minutes)\n\nOpérateur “pipe” pour chaîner les opérations\nOpérations essentielles : sélectionner, filtrer…\n\n9h30 - 10h : Pause\n10h - 12h : Manipulations de données avec tidyverse (120 minutes)\n\nSuite des opérations essentielles\nJointures\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Tables (gt) et graphiques (ggplot2) (75 minutes)\n15h - 15h30 : Pause\n15h30 - 17h : Restitution des lectures d’articles (90 minutes)",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-4-données-spatiales-et-mapme.biodiversity",
    "href": "00_programme.html#jour-4-données-spatiales-et-mapme.biodiversity",
    "title": "Programme",
    "section": "JOUR 4 : Données spatiales et mapme.biodiversity",
    "text": "JOUR 4 : Données spatiales et mapme.biodiversity\n\n8h - 8h30 : Présentation des données spatiales (30 minutes)\n\nTypologies, sources et principes techniques\n\nQuestions / discussion (15 minutes)\n\nAvantages et inconvénients de ces sources\nExpériences des participants dans leur utilisation\nOpportunités pour leurs sujets de recherche\n\n8h30 - 9h15 : Manipulation de données spatiales d’AP sur R (45 minutes)\n\nTypes : vecteur, raster\nAnalogie avec les données tabulaires\nOpérations spécifiquement spatiales\n\n9h15 - 9h30 : Pause\n9h30 - 10h15 : Visualisation et analyse des données spatiales (45 minutes)\n\nPoint avec tmap\nClarification sur les projections\nPoursuite des exercices pratiques sur les aires protégées : comparaison des sources, statistiques descriptives\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Présentation du package mapme.biodiversity, discussion/questions et manipulation (90 minutes)\n\nConsultation des ressources disponibles\nDécouverte des données\nPréparation des données pour les aires protégées\n\n15h - 15h30 : Pause\n15h30 - 17h : Poursuite des analyses (90 minutes)\n\nCréation d’une grille sur le territoire\nExemple bref d’acquisition des données et calcul sur la grille",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-5-méthodes-expérimentales-et-observationnelles-avantaprès",
    "href": "00_programme.html#jour-5-méthodes-expérimentales-et-observationnelles-avantaprès",
    "title": "Programme",
    "section": "JOUR 5 : Méthodes expérimentales et observationnelles avant/après",
    "text": "JOUR 5 : Méthodes expérimentales et observationnelles avant/après\n\n8h - 9h30 : Randomisation (45 minutes)\nQuestions / discussion (15 minutes)\n\nDébat autour de la pertinence des RCT\nDéfis méthodologiques et pratique de la faisabilité\nQuestions éthiques\n\n9h30 - 10h : Pause\n10h - 12h : Application pratique : faisons “comme si” les AP étaient créées aléatoirement (45 minutes)\n\nAnalyse de données\nInterprétations\nTests d’équilibre\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Avant/Après (90 minutes)\nDiscussion/questions et manipulation\n\nLimites de l’approche\nMoyens de vérification des tendances\n\n15h - 15h30 : Pause\n15h30 - 17h : Tests de comparaison et d’équilibre avant-après et avec-sans (90 minutes)",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-6-méthodes-observationnelles-dappariement-matching",
    "href": "00_programme.html#jour-6-méthodes-observationnelles-dappariement-matching",
    "title": "Programme",
    "section": "JOUR 6 : Méthodes observationnelles d’appariement (matching)",
    "text": "JOUR 6 : Méthodes observationnelles d’appariement (matching)\n\n8h - 9h30 : Différentes unités/échelles d’analyse (AP, cellules, pixels…) (30 minutes)\nQuestions / discussion (15 minutes)\n\nDébat autour de la pertinence des RCT\nDéfis méthodologiques et pratique de la faisabilité\nQuestions éthiques\nReprise du maillage travaillé en fin de J4 (45 minutes)\n\n9h30 - 10h : Pause\n10h - 12h : Appariement (Matching) (90 minutes)\nQuestions / discussion (30 minutes)\n\nClarification du principe d’appariement\nVariables pertinentes pour les aires protégées\nQuestions sur les biais potentiels liés aux variables non observables\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Présentation du package MatchIt (30 minutes)\n\nExercices d’application aux aires protégées\nSpécification des variables\nAlgorithmes d’appariement\nParamètres associés (60 minutes)\n\n15h - 15h30 : Pause\n15h30 - 17h : Suite des exercices d’application aux aires protégées (90 minutes)\n\nTests d’équilibre",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "00_programme.html#jour-7-double-différence-et-conclusion",
    "href": "00_programme.html#jour-7-double-différence-et-conclusion",
    "title": "Programme",
    "section": "JOUR 7 : Double différence et conclusion",
    "text": "JOUR 7 : Double différence et conclusion\n\n8h - 9h30 : Double différence (DiD) (60 minutes)\nQuestions / discussion (30 minutes)\n\nIntérêt de l’approche DiD\nEnjeux de validité si plusieurs périodes de comparaison\nStratégies de simplification\n\n9h30 - 10h : Pause\n10h - 12h : Package did (30 minutes)\n\nMise en application\nUtilisation sur 2 périodes\nUtilisation sur N périodes\nVérification des tendances de prétraitement (30 minutes)\n\n12h - 13h30 : Pause déjeuner\n13h30 - 15h : Synthèse et outils pratiques (30 minutes)\n\nExercices d’application aux aires protégées\nSpécification des variables\nAlgorithmes d’appariement\nParamètres associés\nRetour sur les méthodes pas approfondies : discontinuité de la régression, synthetic matching… (60 minutes)\n\n15h - 15h30 : Pause\n15h30 - 17h : Évaluation de la formation et remise des certificats (90 minutes)",
    "crumbs": [
      "Programme"
    ]
  },
  {
    "objectID": "04_mapme_biodiversity.html",
    "href": "04_mapme_biodiversity.html",
    "title": "4  L’outil mapme.biodiversity",
    "section": "",
    "text": "4.1 Démarche\nLe package mapme.biodiversity facilite l’analyse statistique de la biodiversité ou d’autres politiques et projets spatialisés. Il propose divers indicateurs pour évaluer la préservation de l’environnement et les activités humaines. Le package est conçu pour permettre des extensions futures grâce à des ressources et des indicateurs personnalisés.\nLe package fournit une interface unifiée pour télécharger et analyser différents jeux de données spatiales, gérant la complexité liée aux divers formats. Il simplifie l’accès aux données en interagissant avec plusieurs backends utilisés par les organisations qui distribuent ces données. Les utilisateurs peuvent contrôler l’analyse en sélectionnant les indicateurs à calculer, permettant ainsi un ajustement précis des processus.\nPour commencer, les utilisateurs saisissent un objet sf contenant uniquement des géométries de type polygone. Le package télécharge ensuite les données raster et vecteur spatiales et temporelles nécessaires correspondant à l’étendue du portefeuille. Les résultats sont ajoutés sous forme de colonnes de listes imbriquées dans l’objet portefeuille, permettant une utilisation aisée d’une large gamme d’indicateurs dans R.\nLe processus d’utilisation est le suivant :\n#| fig-cap: \"Processus de traitement avec mapme.biodiversity\"\n\ngraph TB\n    AA(Définition des polygones d'analyse)\n    A(Initialisation du portefeuille)\n    B(Acquisition des ressources)\n    C(Calcul des indicateurs)\n    D(Analyse statistique avec R)\n    E(Export vers QGIS ou autre)\n    AA--&gt;A\n    A--&gt;B\n    B--&gt;C\n    C--&gt;D\n    C--&gt;E",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'outil mapme.biodiversity</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html",
    "href": "02_bases_R.html",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "",
    "text": "2.1 L’environnement",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#lenvironnement",
    "href": "02_bases_R.html#lenvironnement",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "",
    "text": "2.1.1 Différences R et Rstudio\nR est un langage de programmation open source spécialisé dans la statistique et l’analyse des données. Il a été créé pour fournir un environnement convivial pour la manipulation, l’analyse et la visualisation des données.Il existe d’autres langages de programmation comme Python, JavaScript, Java, C++, etc.\nR est utilisé pour effectuer des opérations statistiques, faire de la modélisation, créer des graphiques et effectuer des analyses de données complexes.\nR est extrêmement flexible et extensible grâce à des packages R, qui ajoutent des fonctionnalités supplémentaires.\nRStudio est un environnement de développement intégré (IDE) conçu spécifiquement pour travailler avec le langage R. C’est un logiciel qui fournit une interface utilisateur plus conviviale pour écrire, exécuter et gérer des scripts R. Il existe d’autres IDE, comme Visual Studio Code ou Jupyter Notebook.\nRStudio inclut un éditeur de texte avec coloration syntaxique, un gestionnaire de packages, des fenêtres pour l’affichage des graphiques et des données, et bien d’autres fonctionnalités pour améliorer la productivité des utilisateurs R.\nEn somme, R est le langage de programmation sous-jacent pour l’analyse des données, tandis que RStudio est un environnement de développement qui facilite l’utilisation de R.\n\n\n2.1.2 Sources d’apprentissage\nIl existe de plusieurs ressources en français pour apprendre à coder sur R. Nous vous recommandons en particulier :\n\nIntroduction à R et au Tidyverse (Barnier 2022) Guide-R: Guide pour l’analyse de données d’enquêtes avec R (Larmarange 2024)\nutilitR: documentation collaborative sur R de l’INSEE (Galiana and Meslin 2022)\n\nLes bonnes ressources anglophones gratuites sont très nombreuses et faciles à trouver sur Internet. Le grand classique est R for data science, de Grolemund et Wickham (2022). On se focalise ici avec deux autres qui sont le plus en lien avec nos sujets :\n\nGeocomputation with R, a book on geographic data analysis,visualization and modeling (Lovelace, Nowosad, and Muenchow 2022).\nMapme.biodiversity: Efficient Monitoring of Global Biodiversity Portfolios (Görgen and Bhandari 2022)\n\nN’hésitez pas à chercher directement sur le Web en cas de problème. Vous serez souvent conduits vers les forums stackoverflow ou RStudio, qui sont aussi des ressources très précieuses pour résoudre des problèmes très spécifiques.\nPour un apprentissage interactif, vous pouvez également utiliser ChatGPT. Cet outil basé sur l’intelligence artificielle s’avère particulièrement utile pour les débutants qui ont besoin de support personnalisé ou pour les utilisateurs avancés comme assistant de programmation pour structurer des chaînes de traitement ou aider avec les problèmes les plus courants. Attention toutefois car il arrive régulièrement à ChatGPT “d’halluciner” des réponses lorsqu’il s’agit de questions très spécifiques.\nPour vous retrouver parmi la multitude de packages existants, il existe une ressource précieuse en ligne : CRAN Task View (https://cran.r-project.org/web/views/). Ce registre fournit des recommandations sur les packages présents sur CRAN adaptés à un sujet spécifique.\nIl existe également de superbes cheat-sheet (“antisèches”) qui récapitulent les principales ressource :\n\nhttps://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf\nhttps://rstudio.github.io/cheatsheets/\n\n\n\n2.1.3 Interface Rstudio\n\nA : fenêtre script/source B : console C : environnement D : explorateur\nLa fenêtre de script permet d’éditer les fichiers scripts en vue d’éxécuter le code.\nLa console est la fênetre où s’éxécute le code et où on peut directement taper des commandes. Il n’est pas obligatoire de passer par la fenêtre de script.\nLe signe “&gt;” dans votre console est appelé “invite de commande” ou “prompt”. C’est le symbole que la console utilise pour indiquer qu’elle est prête à recevoir des commandes ou des instructions de l’utilisateur. Une fois que vous voyez cet invite, vous pouvez commencer à entrer des commandes en utilisant le langage R. Après avoir entré une commande, vous appuyez sur Entrée pour l’exécuter.\nL’environnement rassemble des fonctionnalités pour suivre le fonctionnement de R, en faisant notamment apparaître les différents objets générés par notre script.\nL’explorateur permet de connaître les fichiers de notre ordinateur, de visualiser les rendus graphiques et cartographiqus, les différentes librairies et l’aide pour l’utilisation de ces dernières.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#introduction-au-langage-r",
    "href": "02_bases_R.html#introduction-au-langage-r",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.2 Introduction au langage R",
    "text": "2.2 Introduction au langage R\nR est un langage de programmation puissant et flexible, particulièrement adapté pour l’analyse de données et la statistique. Cette section couvre les bases du langage R, en fournissant une introduction aux concepts fondamentaux tels que les objets, les types de données, les fonctions, et les bonnes pratiques de codage. Ce guide est conçu pour vous aider à acquérir les bases nécessaires pour écrire du code efficace et lisible.\n\n2.2.1 La lisibilité du code\nLa lisibilité du code est cruciale pour comprendre ce qu’un script fait, surtout après une certaine période ou lorsqu’on travaille en équipe.\n\nEspaces autour des opérateurs : Utilisez des espaces autour des opérateurs pour améliorer la lisibilité.\n\n\n# Mauvaise lisibilité\ntotal&lt;-10+2\n\n# Bonne lisibilité\ntotal &lt;- 10 + 2\n\n\nCommentaires clairs : En R, un commentaire commence par le symbole #. Tout ce qui est écrit après # sur la même ligne ne sera pas exécuté. Utilisez des commentaires pour expliquer des parties de code complexes ou des étapes importantes.\n\n\n# Calcul du total des deux valeurs\ntotal &lt;- 10 + 2  # Ajout de 10 et 2\n\n\nUtilisation des parenthèses : Pour les expressions complexes, utilisez des parenthèses afin de rendre l’ordre des opérations explicite.\n\n\n# Utilisation des parenthèses pour clarifier l'ordre des opérations\nresultat &lt;- (10 + 2) * (5 / 14) - (2 * 2)\n\n\n2.2.1.1 Exercice\n\nAméliorer la lisibilité : Reprenez le code suivant et améliorez sa lisibilité en ajoutant des espaces et des commentaires appropriés.\n\n\nresultat&lt;-5*(3+2)-1\n\n\n\n\n2.2.2 L’assignation (création d’objets)\nEn R, on utilise &lt;- pour assigner une valeur à un objet. Cette assignation permet de créer des variables et de les réutiliser plus tard. L’opérateur &lt;- est spécifique à R, mais il est possible d’utiliser = dans certains cas. Cependant, &lt;- est la convention généralement acceptée en R pour éviter toute ambiguïté.\n\nNommer les objets de manière explicite : Choisissez des noms explicites pour les objets afin de comprendre leur rôle dans le code.\n\n\n# Assignation d'une valeur\nmoyenne_hauteur &lt;- 170  # Hauteur moyenne en cm\n\n\nRéassignation des valeurs : Lorsque vous réassignez une valeur à un objet, la valeur précédente est perdue.\n\n\nx &lt;- 2\nx &lt;- 5  # La valeur de x est maintenant 5\n\n\nSuppression d’un objet : Pour libérer la mémoire, vous pouvez supprimer un objet avec rm().\n\n\nrm(x)  # Supprime l'objet x\n\n\n2.2.2.1 Exercice\n\nCréer et réassigner des objets : Créez un objet age et assignez-lui une valeur, puis modifiez cette valeur. Supprimez ensuite l’objet.\n\n\n\n\n2.2.3 Les différents types d’objets en R\nR utilise différents types d’objets pour stocker des données, chacun ayant ses spécificités.\n\nChaînes de caractères : Les chaînes de caractères sont délimitées par des guillemets.\n\n\nnom &lt;- \"Alice\"\nprint(nom)  # Affiche \"Alice\"\n\n[1] \"Alice\"\n\n\n\nVecteurs : Les vecteurs sont des objets qui contiennent plusieurs valeurs de même type.\n\n\n# Création d'un vecteur de tailles\ntailles &lt;- c(156, 164, 197, 147, 173)\ntailles_m &lt;- tailles / 100  # Conversion en mètres\n\nLes opérations peuvent être appliquées à l’ensemble des valeurs d’un vecteur.\n\ntailles_m + 0.1  # Ajoute 0,1 m à chaque valeur du vecteur\n\n[1] 1.66 1.74 2.07 1.57 1.83\n\n\n\n2.2.3.1 Exercice\n\nManipuler des vecteurs : Créez un vecteur de 5 poids en kilogrammes. Convertissez-les en grammes.\n\n\n\n\n2.2.4 Les tableaux de données (data.frame)\nLes data.frame sont des structures de données très courantes qui permettent de stocker des colonnes de types variés.\n\nCréation d’un data.frame : Combinez des vecteurs de même longueur pour créer un tableau de données.\n\n\nnoms &lt;- c(\"Alice\", \"Bob\", \"Charlie\")\nages &lt;- c(25, 30, 35)\ntableau &lt;- data.frame(noms, ages)\nprint(tableau)\n\n     noms ages\n1   Alice   25\n2     Bob   30\n3 Charlie   35\n\n\n\nAccéder aux colonnes : Utilisez $ pour accéder à une colonne spécifique d’un data.frame.\n\n\ntableau$ages  # Accède à la colonne 'ages'\n\n[1] 25 30 35\n\n\n\n2.2.4.1 Exercice\n\nCréer un data.frame : Créez un data.frame avec des noms, des âges et des tailles, puis affichez uniquement la colonne des tailles.\n\n\n\n\n2.2.5 Les noms d’objets\nLes noms des objets doivent être choisis avec soin pour qu’ils soient compréhensibles et explicites.\n\nConvention d’écriture : Utilisez le snake_case pour nommer vos objets (par exemple, moyenne_age).\nÉviter les majuscules et caractères spéciaux : Les majuscules peuvent prêter à confusion, car R est sensible à la casse.\n\n\n# Mauvaise pratique\nT1 &lt;- 100\n\n# Bonne pratique\ntemperature_moyenne &lt;- 100\n\n\n2.2.5.1 Exercice\n\nNommer des objets : Créez des objets pour représenter la température et la pression, en respectant les bonnes pratiques de nommage.\n\n\n\n\n2.2.6 Les fonctions\nLes fonctions sont des ensembles d’instructions qui effectuent des tâches spécifiques. Elles permettent de réutiliser du code facilement.\n\nCréer une fonction : Utilisez le mot-clé function pour créer une fonction.\n\n\n# Fonction qui additionne deux nombres\naddition &lt;- function(x, y) {\n  return(x + y)\n}\n\nresultat &lt;- addition(3, 4)  # Appel de la fonction\nprint(resultat)  # Affiche 7\n\n[1] 7\n\n\n\nFonctions natives et packages : De nombreuses fonctions sont intégrées à R, et d’autres sont disponibles via des packages additionnels.\n\n\n# Utilisation d'une fonction native\nsomme &lt;- sum(5, 10)\nprint(somme)  # Affiche 15\n\n[1] 15\n\n\n\n2.2.6.1 Exercice\n\nCréer une fonction : Créez une fonction qui calcule le carré d’un nombre et testez-la avec différentes valeurs.\n\n\n\n\n2.2.7 Les structures de contrôle : if, else, et les boucles\nLes structures de contrôle permettent d’exécuter du code conditionnellement ou de manière répétitive.\n\nConditions avec if et else : Les instructions if et else sont utilisées pour exécuter du code en fonction de conditions.\n\n\nx &lt;- 10\nif (x &gt; 5) {\n  print(\"x est supérieur à 5\")\n} else {\n  print(\"x est inférieur ou égal à 5\")\n}\n\n[1] \"x est supérieur à 5\"\n\n\nDans cet exemple, le message “x est supérieur à 5” sera affiché car la condition x &gt; 5 est vraie.\n\nBoucles for : Les boucles for permettent de répéter une série d’instructions un certain nombre de fois.\n\n\nfor (i in 1:5) {\n  print(paste(\"Itération :\", i))\n}\n\n[1] \"Itération : 1\"\n[1] \"Itération : 2\"\n[1] \"Itération : 3\"\n[1] \"Itération : 4\"\n[1] \"Itération : 5\"\n\n\nIci, la boucle for va exécuter l’instruction print() pour chaque valeur de i allant de 1 à 5.\n\n2.2.7.1 Exercice\n\nUtiliser une boucle for : Créez une boucle qui affiche les carrés des nombres de 1 à 10.\n\n\n\n\n2.2.8 Les valeurs manquantes\nLes valeurs manquantes (NA) sont courantes dans les jeux de données réels. Il est essentiel de savoir comment les gérer pour éviter des erreurs.\n\nGérer les valeurs manquantes : Utilisez na.rm = TRUE pour ignorer les NA dans des opérations.\n\n\nages &lt;- c(20, 30, NA, 40)\nmean(ages) # Renvoie une valeur manquante \n\n[1] NA\n\nmoyenne_ages &lt;- mean(ages, na.rm = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#librairies-r",
    "href": "02_bases_R.html#librairies-r",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.3 Librairies R",
    "text": "2.3 Librairies R\nLes librairies R sont communément appelées “packages”. Plusieurs packages R sont utilisés pour ce projet. Les packages dans R sont des extensions de logiciels qui ajoutent des fonctionnalités spécifiques au langage R de base.\nIls sont conçus pour faciliter l’analyse de données, la visualisation, la modélisation statistique, et bien plus encore. Les packages sont comme des boîtes à outils virtuelles qui permettent aux utilisateurs d’effectuer des tâches analytiques avancées sans avoir à réinventer la roue à chaque fois. Ils permettent de gagner du temps et de se concentrer sur la résolution de problèmes spécifiques à son domaine d’étude, au lieu de vous soucier de la programmation de fonctions de base.\nLors de la rédaction de publications scientifiques, il est important de citer correctement les packages R utilisés dans votre analyse. Assurez-vous d’inclure le nom complet du package ainsi que le nom de son auteur ou des auteurs. Zotero et RStudio permettent aisément d’inclure ces citations dans votre analyse.\nLes autres packages mobilisés pour ce cours sont listés dans le bloc de code ci-dessous :\n\nlibrary(\"tidyverse\") # Une série de packages pour faciliter la manipulation de données\nlibrary(\"readxl\") # Pour lire les fichiers Excel (Carvalho et al. 2018)\nlibrary(\"gt\") # Pour des rendus graphiques harmonisés HTML et PDF/LaTeX\nlibrary(\"wdpar\") # Pour télécharger simplement la base d'aires protégées WDPA\n\n\n2.3.1 Le tidyverse\nLe “tidyverse” est un ensemble cohérent de packages R conçus pour la manipulation, la visualisation et l’analyse de données de manière cohérente et efficace. Il a été développé pour simplifier le flux de travail de l’analyse de données et pour rendre le code plus lisible et plus facile à comprendre.\n\n\n2.3.2 L’opérateur pipeline\nLe signe %&gt;% est un “tuyau”. On peut le lire à haute voix comme “ensuite”. Par exemple :\n\nlibrary(tidyverse)\n\na &lt;- 4\nb &lt;- 7\nc &lt;- 3\n\nd &lt;- a %&gt;%\n  addition(b) %&gt;%\n  addition(c)\n\n\n\n2.3.3 La préparation des données avec dplyr\nLe “tidyverse” comprend plusieurs packages populaires, notamment dplyr. Ce dernier est très utile pour épurer les données lorsque vous travaillez sur des tableaux (et donc sur des tables attributaires).\nIl est utilisé pour la manipulation de données, notamment le filtrage, la sélection, le regroupement et la création de nouvelles variables.\n\n# On commence par créer les variables (les colonnes du tableau)\nnoms &lt;- c(\"John\", \"Jack\", \"Cindy\", \"Samantha\")\nsexe &lt;- c(\"homme\", \"homme\", \"femme\", \"femme\")\nages &lt;- c(42, 57, 24, NA)\npoids &lt;- c(87, 73, NA, NA)\ntailles &lt;- c(174, 198, 192, 164)\n\n# On les rassemble dans un tableau \nma_table &lt;- data.frame(noms, sexe, ages, poids, tailles)\n\nma_table\n\n      noms  sexe ages poids tailles\n1     John homme   42    87     174\n2     Jack homme   57    73     198\n3    Cindy femme   24    NA     192\n4 Samantha femme   NA    NA     164\n\n# Un exemple qui combine ces opérations\nma_table %&gt;%\n  filter(!is.na(ages))\n\n   noms  sexe ages poids tailles\n1  John homme   42    87     174\n2  Jack homme   57    73     198\n3 Cindy femme   24    NA     192\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids)\n\n   sexe ages tailles poids\n1 homme   42     174    87\n2 homme   57     198    73\n3 femme   24     192    NA\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids) %&gt;%\n  group_by(sexe) %&gt;%\n  summarise(nb_pers = n())\n\n# A tibble: 2 × 2\n  sexe  nb_pers\n  &lt;chr&gt;   &lt;int&gt;\n1 femme       1\n2 homme       2\n\nma_table %&gt;%\n  filter(!is.na(ages)) %&gt;%\n  select(sexe, ages, tailles, poids) %&gt;%\n  group_by(sexe) %&gt;%\n  summarise(nb_pers = n(),\n            somme_poids = sum(poids, na.rm = TRUE),\n            taille_max = max(tailles, na.rm = TRUE),\n            age_moy = mean(ages, na.rm = TRUE))\n\n# A tibble: 2 × 5\n  sexe  nb_pers somme_poids taille_max age_moy\n  &lt;chr&gt;   &lt;int&gt;       &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n1 femme       1           0        192    24  \n2 homme       2         160        198    49.5\n\n\nVoici certaines des fonctions fondamentales de dplyr : - select : choisir des colonnes - filter : choisir des lignes - mutate : modifier des valeurs - group_by : regrouper les données par une ou plusieurs variables - summarise : créer des résumés sur les données\n\nExercice en groupe : à partir du tableau ventes_magasin, utilisez les fonctions précédentes et l’opérateur pipe pour réaliser les opérations suivantes :\n\nSélectionnez uniquement les colonnes produit, quantite, et prix_unitaire du data frame ventes_magasin.\nNe conservez que les ventes où la quantité vendue est supérieure à 5 unités.\nAjoutez une nouvelle colonne nommée montant qui représente le montant total de chaque vente (quantité multipliée par le prix unitaire) et ajoutez-la au data frame.\nCréez un nouveau tableau ventes_par_produit, regroupez les données par produit pour calculer la quantité totale vendue de chaque produit.\nComplétez ce tableau avec le montant total et le nombre de ventes.\n\n\n\n# Création du data frame ventes_magasin\nventes_magasin &lt;- data.frame(\n  produit = c(\"Produit A\", \"Produit B\", \"Produit A\", \"Produit C\", \"Produit B\",\n              \"Produit A\", \"Produit C\", \"Produit B\", \"Produit A\"),\n  quantite = c(8, 4, 12, 6, 7, 9, 3, 11, 5),\n  prix_unitaire = c(10, 15, 8, 12, 20, 10, 18, 14, 9),\n  date_vente = ymd( # Cette fonction interprète des dates year-month-day\n    c(\"2023-01-05\", \"2023-01-08\", \"2023-01-09\", \"2023-01-10\", \"2023-01-15\",\n      \"2023-01-20\", \"2023-01-25\", \"2023-01-30\", \"2023-02-02\"))\n  )\n\n\n\n2.3.4 Les jointures\nLes jointures permettent de fusionner deux tableaux par une variable d’identification (“clé”).\n\n# Tableau clients\nclients &lt;- data.frame(ID = c(1, 2, 3, 4),\n                      nom_client = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"))\n\n# Tableau commandes\ncommandes &lt;- data.frame(ID = c(2, 3, 1, 4),\n                        montant = c(100, 150, 50, 200))\n\n# Jointure par ID\nresultat &lt;- inner_join(clients, commandes, by = \"ID\")\n\nCette opération exige toutefois que la variable d’identification soit écrite de manière identique dans les deux jeux de données.\nSupposons que l’on travaille sur les aires protégées à Madagascar et que l’on dispose de deux jeux de données provenant de sources différentes. On a alors des informations complémentaires que l’on souhaite fusionner en un seul tableau via le nom de l’aire protégée.\nIl faudra veiller à ce que les noms aient la même écriture (pas de différences avec des majuscules, des abréviations ou des noms raccourcis).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#import-de-données",
    "href": "02_bases_R.html#import-de-données",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.4 Import de données",
    "text": "2.4 Import de données\nPour cette section, nous allons développer l’importation de différents types de fichiers couramment utilisés dans R pour la manipulation et l’analyse de données. R permet d’importer et de manipuler divers formats de fichiers, notamment CSV, Excel et fichiers texte.\n\n2.4.1 Utilisation du menu interactif de RStudio\nAvant de passer à l’importation via du code, il est recommandé de se familiariser avec le menu interactif de RStudio pour importer des fichiers.\n\nPour importer un fichier, allez dans le panneau Files en bas à droite de l’interface RStudio.\nNaviguez vers le fichier data/AP_Vahatra.csv, faites un clic droit et sélectionnez Import Dataset.\nUn assistant d’import s’ouvrira, vous permettant de vérifier les données et de définir les options d’importation (séparateur, types de colonnes, etc.).\nUne fois satisfait, cliquez sur Import et examinez le code automatiquement généré par RStudio. Ce code pourra être utilisé et modifié par la suite pour automatiser l’importation des données.\n\n\n\n2.4.2 Types de fichiers et comment les importer en ligne de code\n\nFichiers CSV : Les fichiers CSV sont très populaires pour leur simplicité. Pour importer un fichier CSV, vous pouvez utiliser la fonction read.csv() ou read_csv() (package readr, partie du tidyverse).\n\n\nlibrary(readr)\n\nAP_Vahatra &lt;- read_csv(\"data/AP_Vahatra.csv\")\n\n2. Fichiers Excel : Pour importer des fichiers Excel, on peut utiliser le package readxl. La fonction read_xlsx() permet d’importer un fichier au format .xlsx.\n\nlibrary(readxl)\n\nMon_objet_R &lt;- read_xlsx(\"data/mon_fichier.xlsx\")\n\n3. Fichiers texte : Les fichiers texte peuvent être importés avec read.table() ou read_delim() (pour des délimiteurs personnalisés).\n\nAP_Vahatra &lt;- read_delim(\"data/mon_fichier.txt\", delim = \"\\t\")\n\n\n\n2.4.3 Exercice pratique\nPour vous familiariser avec ces différents formats, voici un petit exercice :\n\nImportez un fichier CSV présent dans le dossier data. Le fichier s’appelle AP_Vahatra.csv. Utilisez read_csv() pour l’importer dans un objet R.\nImportez un fichier Excel présent dans le dossier data. Le fichier s’appelle AP_Vahatra.xlsx. Utilisez read_xlsx() pour l’importer dans un objet R.\nImportez un fichier texte présent dans le dossier data. Le fichier s’appelle AP_Vahatra.txt. Utilisez read_delim() pour l’importer dans un objet R.\nAffichez les premières lignes avec la fonction head() des jeux de données pour vérifier l’importation correcte.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#exploration-des-données-importées",
    "href": "02_bases_R.html#exploration-des-données-importées",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.5 Exploration des données importées",
    "text": "2.5 Exploration des données importées\nNous allons maintenant explorer le contenu d’AP_Vahatra.\n\nAfficher les noms des colonnes :\n\n\ncolnames(AP_Vahatra)\n\n [1] \"nom\"                \"cat_iucn\"           \"creation\"          \n [4] \"date_creation\"      \"date_modification\"  \"mention_changement\"\n [7] \"hectares\"           \"num_atlas_\"         \"full_name\"         \n[10] \"province\"           \"region\"             \"district\"          \n[13] \"gest_1\"             \"gest_2\"             \"type_ap\"           \n[16] \"an_creation\"        \"nom_wdpa\"           \"geometry\"          \n[19] \"rownum\"            \n\n\n\nSélectionner les 10 premières aires protégées et leur catégorie IUCN :\n\n\nAP_Vahatra %&gt;%\n  select(nom, cat_iucn) %&gt;%\n  filter(row_number() &lt;= 10)\n\n# A tibble: 10 × 2\n   nom                                     cat_iucn\n   &lt;chr&gt;                                   &lt;chr&gt;   \n 1 Agnakatrika                             VI      \n 2 Agnalazaha                              VI      \n 3 Ambatofotsy                             V       \n 4 Ambatotsirongorongo                     V       \n 5 Ambatovaky                              IV      \n 6 Ambohidray                              &lt;NA&gt;    \n 7 Ambohijanahary                          IV      \n 8 Ambohitantely                           IV      \n 9 Ambohitr'Antsingy Montagne des Français V       \n10 Amoron'i Onilahy                        V       \n\n\n\nExplorer les dates de création et de modification :\n\n\nAP_Vahatra %&gt;%\n  select(nom, date_creation, date_modification) %&gt;%\n  filter(!is.na(date_creation)) %&gt;%\n  arrange(date_creation)\n\n# A tibble: 98 × 3\n   nom            date_creation       date_modification  \n   &lt;chr&gt;          &lt;dttm&gt;              &lt;dttm&gt;             \n 1 Lokobe         1927-12-31 00:00:00 2011-07-06 00:00:00\n 2 Analamerana    1956-02-20 00:00:00 2015-04-21 00:00:00\n 3 Ankarana       1956-02-20 00:00:00 2015-04-21 00:00:00\n 4 Bora           1956-02-20 00:00:00 NA                 \n 5 Manongarivo    1956-02-20 00:00:00 NA                 \n 6 Marotandrano   1956-02-20 00:00:00 2015-04-28 00:00:00\n 7 Bemarivo       1956-09-10 00:00:00 NA                 \n 8 Kasijy         1956-09-10 00:00:00 NA                 \n 9 Ambatovaky     1958-10-28 00:00:00 2015-04-28 00:00:00\n10 Ambohijanahary 1958-10-28 00:00:00 NA                 \n# ℹ 88 more rows\n\n\n\nCalculer la superficie totale des aires protégées :\n\n\nAP_Vahatra %&gt;%\n  summarise(superficie_totale = sum(hectares, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  superficie_totale\n              &lt;dbl&gt;\n1          6372482.\n\n\n\nLister les aires protégées gérées par “Madagascar National Parks” :\n\n\nAP_Vahatra %&gt;%\n  filter(gest_1 == \"Madagascar National Parks\") %&gt;%\n  select(nom, gest_1)\n\n# A tibble: 38 × 2\n   nom              gest_1                   \n   &lt;chr&gt;            &lt;chr&gt;                    \n 1 Ambatovaky       Madagascar National Parks\n 2 Ambohitantely    Madagascar National Parks\n 3 Analamazaotra    Madagascar National Parks\n 4 Analamerana      Madagascar National Parks\n 5 Andohahela       Madagascar National Parks\n 6 Andranomena      Madagascar National Parks\n 7 Anjanaharibe Sud Madagascar National Parks\n 8 Ankarafantsika   Madagascar National Parks\n 9 Ankarana         Madagascar National Parks\n10 Baie de Baly     Madagascar National Parks\n# ℹ 28 more rows\n\n\n\nObtenir des statistiques descriptives sur la superficie des aires protégées :\n\n\nAP_Vahatra %&gt;%\n  summarise(superficie_moyenne = mean(hectares, na.rm = TRUE),\n            superficie_mediane = median(hectares, na.rm = TRUE),\n            superficie_max = max(hectares, na.rm = TRUE),\n            superficie_min = min(hectares, na.rm = TRUE))\n\n# A tibble: 1 × 4\n  superficie_moyenne superficie_mediane superficie_max superficie_min\n               &lt;dbl&gt;              &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1             65025.             24963.        426594.           225.\n\n\n\n2.5.1 Exercice supplémentaire\nPour cet exercice, utilisez les données AP_Vahatra que vous avez importées pour produire les statistiques suivantes :\n\nFiltrez les aires protégées dont la catégorie IUCN est “II” et affichez uniquement leurs noms.\nAjoutez une colonne superficie_km2 à AP_Vahatra en convertissant la valeur hectares en kilomètres carrés.\nTriez les données par superficie_km2 de manière décroissante.\nTrouvez le nom des 3 plus grandes aires protégées\nCalculez la superficie totale de toutes les aires protégées\nProduisez un résumé statistique (summary()) des valeurs de superficie_km2.\nFiltrez les aires protégées ayant une superficie supérieure ou égale au 3ème quartile et calculez leur nombre.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#production-de-tableaux-avec-r",
    "href": "02_bases_R.html#production-de-tableaux-avec-r",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.6 Production de tableaux avec R",
    "text": "2.6 Production de tableaux avec R\nLa fonction gt() permet d’obtenir des tableaux bien formatés, idéals pour présenter des résultats de manière claire et esthétique. Elle est particulièrement utile pour la création de rapports et la présentation de données tabulaires de manière attrayante. Voici quelques-unes des fonctions essentielles de gt :\n\ncols_label() : Cette fonction permet de renommer les colonnes pour leur donner des titres plus explicites.\ntab_header() : Elle permet d’ajouter un titre et un sous-titre au tableau, facilitant ainsi la compréhension de ce que le tableau représente.\nfmt_number() : Cette fonction permet de formater les nombres, par exemple en définissant le nombre de décimales.\ntab_source_note() : Elle permet d’ajouter une note de source au tableau, indiquant d’où proviennent les données.\n\n\n2.6.1 Exemple d’utilisation de gt\nVoici un exemple d’utilisation de gt pour résumer les superficies des aires protégées par catégorie IUCN.\n\n# On va dabord convertir les superficies en hectares dans une nouvelle colonne\nAP_Vahatra &lt;- AP_Vahatra %&gt;%\n  mutate(superficie_km2 = hectares * 0.01)\n\n\n# Calcul des superficies totales pour chaque catégorie IUCN\nAP_Vahatra_iucn &lt;- AP_Vahatra %&gt;%\n  mutate(superficie_km2 = hectares * 0.01) %&gt;%\n  filter(!is.na(cat_iucn)) %&gt;%\n  group_by(cat_iucn) %&gt;%\n  summarise(superficie_totale = sum(superficie_km2))\n\n# Production du tableau\nAP_Vahatra_iucn %&gt;%\n  gt() %&gt;%\n  cols_label(cat_iucn = \"Catégorie IUCN\",\n             superficie_totale = \"Superficie totale (km²)\") %&gt;%\n  tab_header(\n    title = \"Aires protégées de Madagascar : superficies par catégorie IUCN\") %&gt;%\n  tab_source_note(\"Source : données de l'association Vahatra\") %&gt;%\n  fmt_number(decimals = 2)\n\n\n\n\n\n\n\nAires protégées de Madagascar : superficies par catégorie IUCN\n\n\nCatégorie IUCN\nSuperficie totale (km²)\n\n\n\n\nI\n22.40\n\n\nII\n25,380.56\n\n\nIII\n44.17\n\n\nIV\n4,138.88\n\n\nV\n22,752.70\n\n\nVI\n8,265.72\n\n\n\nSource : données de l'association Vahatra\n\n\n\n\n\n\n\n\n\n\n2.6.2 Superficie cumulée par année de création\nAvant de créer un graphique en nuages de points, nous devons préparer un tableau qui résume la superficie cumulée des aires protégées en fonction de leur année de création.\n\nAP_superficie_annees &lt;- AP_Vahatra %&gt;%\n  group_by(an_creation) %&gt;%\n  summarise(superficie_annuelle = sum(superficie_km2, na.rm = TRUE)) %&gt;%\n  arrange(an_creation) %&gt;%\n  mutate(superficie_cumulée = cumsum(superficie_annuelle))\n\n\n\n2.6.3 Exercice : Créer un tableau synthétique\n\nRésumer la superficie cumulée par année de création : Utilisez gt() pour présenter les résultats de AP_superficie_annees de manière claire et lisible.\nAjouter des colonnes d’explication : Créez des colonnes qui expliquent chaque étape du processus (par exemple, année de création, superficie annuelle ajoutée, superficie cumulée).\nAjouter un titre et une note de source : Le tableau devrait inclure un titre explicite et une note de source, similaire à l’exemple précédent.\n\nCes étapes vous aideront à présenter les données de manière élégante et à faciliter la compréhension des tendances liées à la création des aires protégées.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  },
  {
    "objectID": "02_bases_R.html#production-de-graphiques-avec-ggplot2",
    "href": "02_bases_R.html#production-de-graphiques-avec-ggplot2",
    "title": "2  Fondamentaux pour l’utilisation de R",
    "section": "2.7 Production de graphiques avec ggplot2",
    "text": "2.7 Production de graphiques avec ggplot2\nPour produire des graphiques de qualité avec R, nous utilisons souvent le package ggplot2. Ce package repose sur une approche appelée “la grammaire des graphiques”. Cette grammaire est une façon systématique de construire des visualisations, en combinant différents composants graphiques, comme des axes, des légendes, des points, des lignes, etc. Elle offre une grande flexibilité et permet de créer des graphiques complexes de manière progressive.\n\n2.7.1 Philosophie de la “grammaire des graphiques”\nLa grammaire des graphiques est une méthode de pensée pour créer des visualisations. Elle repose sur l’idée que tout graphique peut être décomposé en une série de couches. Par exemple :\n\nDonnées : La première étape consiste à spécifier les données à utiliser pour le graphique.\nAesthetic mappings (Mappings esthétiques) : Cela consiste à indiquer comment les variables des données seront représentées visuellement, par exemple, quel axe représente quelle variable, ou quelles couleurs représentent quelles catégories.\nGeometries (Géométries) : Chaque graphique est composé de formes géométriques, comme des points, des lignes, des barres, etc. Ces géométries déterminent la manière dont les données seront visualisées.\nFacettes : Cette étape permet de subdiviser le graphique en plusieurs sous-graphiques basés sur une variable, facilitant ainsi la comparaison entre catégories.\nStatistiques : Certaines visualisations nécessitent des transformations statistiques, comme l’ajout de moyennes, de tendances ou d’intervalles de confiance.\nCoordonnées : Il s’agit de définir les systèmes de coordonnées, tels que les axes cartésiens ou polaires.\nThème : Enfin, le thème est utilisé pour définir l’apparence générale du graphique, par exemple, les couleurs de fond, la taille des polices, etc.\n\nEn combinant ces différentes couches, ggplot2 permet de construire des visualisations claires et personnalisées, adaptées aux besoins spécifiques de l’analyse.\n\n\n2.7.2 Introduction à ggplot2\nLe package ggplot2 suit cette logique en permettant d’ajouter chaque composant graphique avec le signe +. Voici une approche progressive pour comprendre ggplot2 :\n\nImporter le package et les données :\n\n\nlibrary(ggplot2)\n# On suppose que AP_superficie_annees est déjà créé\n\n\nCréer la base du graphique :\n\nLa première étape consiste à spécifier les données et les mappings esthétiques. Par exemple, nous allons indiquer que l’axe des abscisses (x) représente l’année de création (an_creation) et l’axe des ordonnées (y) représente la superficie cumulée (superficie_cumulée).\n\nggplot(data = AP_superficie_annees, aes(x = an_creation, y = superficie_cumulée))\n\n\n\n\n\n\n\n\n\nAjouter des géométries :\n\nPour visualiser les données, nous ajoutons des points (geom_point()) et des lignes (geom_line()).\n\nggplot(data = AP_superficie_annees, aes(x = an_creation, y = superficie_cumulée)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\n\n\nAjouter des labels :\n\nPour rendre le graphique plus compréhensible, nous ajoutons des labels pour les axes et un titre.\n\nggplot(data = AP_superficie_annees, aes(x = an_creation, y = superficie_cumulée)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Année\", y = \"Superficie cumulée (km²)\",\n       title = \"Superficie cumulée en fonction de l'année de création\")\n\n\n\n\n\n\n\n\n\nAppliquer un thème :\n\nLe thème permet de personnaliser l’apparence générale du graphique. Ici, nous utilisons theme_minimal() pour une apparence épurée.\n\nggplot(data = AP_superficie_annees, aes(x = an_creation, y = superficie_cumulée)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Année\", y = \"Superficie cumulée (km²)\",\n       title = \"Superficie cumulée en fonction de l'année de création\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n2.7.3 Exercice : Créer un graphique avec ggplot2\n\nCréer un graphique en nuages de points : Utilisez ggplot2 pour créer un graphique qui montre la superficie annuelle des aires protégées en fonction de leur année de création.\nAjouter des lignes de tendance : Ajoutez une ligne de tendance (geom_smooth()) pour montrer l’évolution générale de la superficie annuelle au fil du temps.\nFacetter par catégorie IUCN : Utilisez facet_wrap() pour créer des sous-graphiques qui montrent la superficie cumulée par année de création pour chaque catégorie IUCN.\n\nCes étapes vous permettront de comprendre progressivement comment construire des graphiques en utilisant la grammaire des graphiques, et d’explorer différentes façons de visualiser vos données.\n\n\n\n\nBarnier, Julien. 2022. “Introduction à R Et Au Tidyverse.” https://juba.github.io/tidyverse/index.html.\n\n\nGaliana, Lino, and Olivier Meslin, eds. 2022. “utilitR: Documentation Collaborative Sur r.” https://www.book.utilitr.org/.\n\n\nGörgen, Darius A., and Om Prakash Bhandari. 2022. Mapme.biodiversity: Efficient Monitoring of Global Biodiversity Portfolios. https://CRAN.R-project.org/package=mapme.biodiversity.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2022. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st edition. Sebastopol, CA: O’Reilly Media. https://r4ds.had.co.nz/.\n\n\nLarmarange, Joseph. 2024. Guide-r : Guide Pour l’analyse de Données d’enquêtes Avec r. https://larmarange.github.io/guide-R/.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2022. Geocomputation with R. Boca Raton London New York: Routledge. https://geocompr.robinlovelace.net/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fondamentaux pour l'utilisation de R</span>"
    ]
  }
]